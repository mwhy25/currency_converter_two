{"version":3,"sources":["CurrencyInput.js","App.js","reportWebVitals.js","index.js"],"names":["CurrencyInput","props","amount","currency","symbolsOptions","onAmountChange","onSelectChange","className","type","value","onChange","e","target","map","option","App","useState","amount1","setAmount1","amount2","setAmount2","currency1","setCurrency1","currency2","setCurrency2","symbols","setSymbols","format","number","toFixed","useEffect","axios","get","then","respone","data","rates","Object","keys","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAEaA,EAAgB,SAACC,GAAW,IAC/BC,EACND,EADMC,OAAQC,EACdF,EADcE,SAAUC,EACxBH,EADwBG,eAAgBC,EACxCJ,EADwCI,eAAgBC,EACxDL,EADwDK,eAE1D,OACE,sBAAKC,UAAU,QAAf,UACE,uBACEC,KAAK,OACLC,MAAOP,EACPQ,SAAU,SAACC,GAAD,OAAON,EAAeM,EAAEC,OAAOH,UAE3C,wBAAQA,MAAON,EAAUO,SAAU,SAACC,GAAD,OAAOL,EAAeK,EAAEC,OAAOH,QAAlE,SACGL,EAAeS,KAAI,SAACC,GAAD,OAClB,wBAAQL,MAAOK,EAAf,SACGA,GADyBA,Y,iBC2DvBC,MArEf,WACE,IADa,EAGiBC,mBAAS,GAH1B,mBAGNC,EAHM,KAGGC,EAHH,OAIiBF,mBAAS,GAJ1B,mBAING,EAJM,KAIGC,EAJH,OAKqBJ,mBAAS,OAL9B,mBAKNK,EALM,KAKKC,EALL,OAMqBN,mBAAS,OAN9B,mBAMNO,EANM,KAMKC,EANL,OAQiBR,mBAAS,IAR1B,mBAQNS,EARM,KAQGC,EARH,KAwBb,SAASC,EAAOC,GACd,OAAOA,EAAOC,QAAQ,GAoBxB,OA3BAC,qBAAU,WACRC,IAAMC,IAjBN,+EAiBoBC,MAAK,SAACC,GACxBR,EAAWQ,EAAQC,KAAKC,YAEzB,IAwBD,sBAAK7B,UAAU,MAAf,UACE,2CACA,cAAC,EAAD,CACEH,eAAgBiC,OAAOC,KAAKb,GAC5BvB,OAAQe,EACRd,SAAUkB,EACVhB,eAzBN,SAA6BY,GAC3BG,EAAWO,EAAQV,EAAUQ,EAAQF,GAAcE,EAAQJ,KAC3DH,EAAWD,IAwBPX,eAtBN,SAA6Be,GAC3BD,EAAWO,EAAQV,EAAUQ,EAAQF,GAAcE,EAAQJ,KAC3DC,EAAaD,MAsBX,8CAGA,cAAC,EAAD,CACEjB,eAAgBiC,OAAOC,KAAKb,GAC5BvB,OAAQiB,EACRhB,SAAUoB,EACVlB,eA1BN,SAA6Bc,GAC3BD,EAAWS,EAAQR,EAAUM,EAAQJ,GAAcI,EAAQF,KAC3DH,EAAWD,IAyBPb,eAvBN,SAA6BiB,GAC3BL,EAAWS,EAAQR,EAAUM,EAAQJ,GAAcI,EAAQF,KAC3DC,EAAaD,UClCFgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d65a778f.chunk.js","sourcesContent":["import React from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nexport const CurrencyInput = (props) => {\r\n  const { amount, currency, symbolsOptions, onAmountChange, onSelectChange } =\r\n    props;\r\n  return (\r\n    <div className=\"group\">\r\n      <input\r\n        type=\"text\"\r\n        value={amount}\r\n        onChange={(e) => onAmountChange(e.target.value)}\r\n      />\r\n      <select value={currency} onChange={(e) => onSelectChange(e.target.value)}>\r\n        {symbolsOptions.map((option) => (\r\n          <option value={option} key={option}>\r\n            {option}\r\n          </option>\r\n        ))}\r\n        {/* {symbols.map((symbol) => (\r\n          <option value={symbol}>{symbol}</option>\r\n        ))} */}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n// CurrencyInput.propTypes = {\r\n//   amount: PropTypes.number.isRequired,\r\n//   currency: PropTypes.string.isRequired,\r\n//   symbolsOptions: PropTypes.array,\r\n// };\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { CurrencyInput } from \"./CurrencyInput\";\nimport axios from \"axios\";\nfunction App() {\n  const BASE_URL =\n    \"http://data.fixer.io/api/latest?access_key=b01a0d94533afe3504dc7bc2d8ea555b\";\n  const [amount1, setAmount1] = useState(1);\n  const [amount2, setAmount2] = useState(1);\n  const [currency1, setCurrency1] = useState(\"IDR\");\n  const [currency2, setCurrency2] = useState(\"USD\");\n  // const [rates, setRates] = useState();\n  const [symbols, setSymbols] = useState([]);\n\n  // useEffect(() => {\n  //   fetch(BASE_URL).then((respone) =>\n\n  //     respone.json()\n  //   )\n  //   .then((data) => setSymbols([data.base, ...data.rates]));\n  // }, []);\n\n  useEffect(() => {\n    axios.get(BASE_URL).then((respone) => {\n      setSymbols(respone.data.rates);\n    });\n  }, []);\n\n  function format(number) {\n    return number.toFixed(4);\n  }\n  function handleAmountChange1(amount1) {\n    setAmount2(format((amount1 * symbols[currency2]) / symbols[currency1]));\n    setAmount1(amount1);\n  }\n  function handleSelectChange1(currency1) {\n    setAmount2(format((amount1 * symbols[currency2]) / symbols[currency1]));\n    setCurrency1(currency1);\n  }\n\n  function handleAmountChange2(amount2) {\n    setAmount1(format((amount2 * symbols[currency1]) / symbols[currency2]));\n    setAmount2(amount2);\n  }\n  function handleSelectChange2(currency2) {\n    setAmount1(format((amount2 * symbols[currency1]) / symbols[currency2]));\n    setCurrency2(currency2);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Converter</h1>\n      <CurrencyInput\n        symbolsOptions={Object.keys(symbols)}\n        amount={amount1}\n        currency={currency1}\n        onAmountChange={handleAmountChange1}\n        onSelectChange={handleSelectChange1}\n      />\n      <h1>\n        ↑↓\n        </h1>\n      <CurrencyInput\n        symbolsOptions={Object.keys(symbols)}\n        amount={amount2}\n        currency={currency2}\n        onAmountChange={handleAmountChange2}\n        onSelectChange={handleSelectChange2}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}